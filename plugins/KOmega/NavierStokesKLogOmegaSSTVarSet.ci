//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace KOmega {

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, int SGROUP>
NavierStokesKLogOmegaSSTVarSet<BASE, SGROUP>::NavierStokesKLogOmegaSSTVarSet
(const std::string& name, Common::SafePtr<Framework::PhysicalModelImpl> model) :
  NavierStokesKLogOmegaBSLVarSet<BASE, SGROUP>(name, model)
{
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, int SGROUP>
NavierStokesKLogOmegaSSTVarSet<BASE, SGROUP>::~NavierStokesKLogOmegaSSTVarSet()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, int SGROUP>
void NavierStokesKLogOmegaSSTVarSet<BASE, SGROUP>::setModelCoefficients()
{
  NavierStokesKLogOmegaBSLVarSet<BASE, SGROUP>::setModelCoefficients();
  
  //Modified k-omega coeficients for SST
  this->_sigmaK1 = 0.85;
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, int SGROUP>
CFreal NavierStokesKLogOmegaSSTVarSet<BASE, SGROUP>::getTurbDynViscosityFromGradientVars
(const RealVector& state, const std::vector<RealVector*>& gradients)
{
  cf_assert(this->_wallDistance >= 0.);
  //@todo put this here??
  cf_assert(gradients.size() > 0);
    
  CFreal mut = 0.;
  if((this->_wallDistance > 0.) && (gradients.size() > 0))
  {
    const CFreal a1 = 0.31;

    const CFreal rho = this->getDensity(state);
    const CFreal K = std::max(state[this->_kID],0.0);
    const CFreal Omega = std::exp(state[this->_kID+1]);
    CFreal vorticity = 0.;
    if (Framework::PhysicalModelStack::getActive()->getDim() == 2) {
      vorticity = fabs((*(gradients[this->_vID]))[XX] - (*(gradients[this->_uID]))[YY]);
    }
    else {
      vorticity = sqrt( sq((*(gradients[this->_wID]))[YY] - (*(gradients[this->_vID]))[ZZ]) +
			sq((*(gradients[this->_uID]))[ZZ] - (*(gradients[this->_wID]))[XX]) +
			sq((*(gradients[this->_vID]))[XX] - (*(gradients[this->_uID]))[YY]) );
    }
    
    const CFreal mu = this->getLaminarDynViscosityFromGradientVars(state);
    
    //@todo here there should be an adimensionalization coef
    const CFreal arg2_1 = 2. * sqrt(K) / (0.09 * Omega * this->_wallDistance);
    const CFreal arg2_2 = (500. * mu) / (rho * this->_wallDistance * this->_wallDistance * Omega);
    const CFreal arg2 = std::max(arg2_1,arg2_2);
    const CFreal F2 = tanh(arg2*arg2);
    
    if (std::max(a1*Omega , vorticity*F2) == 0.0)
     mut =  0.0;
    else
     mut = (a1 * rho * K )/ std::max(a1*Omega , vorticity*F2);
    
  }
  
  return mut;
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace KOmega

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
